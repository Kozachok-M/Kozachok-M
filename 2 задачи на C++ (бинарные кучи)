Задача 1 (10, 5, 8, 3, 7, 1 найти три наименьших числа с помощью минимальной кучи)

#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int main() {
    priority_queue<int, vector<int>, greater<int>> heap;  //  Создаем min-heap
    for(int x : {10, 5, 8, 3, 7, 1}) heap.push(x);       //  Добавляем все числа
    for(int i = 0; i < 3; i++) {                         //  Повторяем 3 раза:
        cout << heap.top() << " ";                       //  Выводим минимум
        heap.pop();                                      //  Удаляем его
    }
}

Результат: 1 3 5

Обьяснение кода:
1. priority_queue<int, vector<int>, greater<int>> heap; - Создаем минимальную кучу, где самый маленький элемент всегда наверху
2. for(int x : {10, 5, 8, 3, 7, 1}) heap.push(x); - Добавляем все числа в кучу (они автоматически упорядочиваются)
3. for(int i = 0; i < 3; i++) - Цикл для извлечения 3 самых маленьких чисел
4. cout << heap.top() << " "; - Берем текущий минимальный элемент (он всегда на вершине кучи)
5. heap.pop(); - Удаляем этот элемент, после чего следующий минимальный становится на вершину

Задача 2 (найти самое маленькое число)

#include <iostream>
#include <queue>
using namespace std;

int main() {
    priority_queue<int, vector<int>, greater<int>> q;  //  Создаем кучу для маленьких чисел
    q.push(5); q.push(2); q.push(8);                   //  Кладем числа 5, 2, 8
    cout << "Самое маленькое: " << q.top();            //  Смотрим что наверху
    return 0;
}

Результат: Самое маленькое: 2

Обьяснение кода:
1. priority_queue<int, vector<int>, greater<int>> q; - Делаем "бинарную кучу", где сверху всегда лежит самый маленький элемент
2. q.push(5); q.push(2); q.push(8); - Кладем числа в бинарную кучу в любом порядке
3. cout << "Самое маленькое: " << q.top(); - Заглядываем в бинарную кучу и берем то, что лежит сверху (самое маленькое)





